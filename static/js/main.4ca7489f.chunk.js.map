{"version":3,"sources":["services/path/location.js","services/api/httpClient.js","services/api/index.js","repository/locations/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["PATH_LOCATION","serviceWithoutToken","axios","create","baseURL","timeout","headers","apiGetWithoutToken","url","params","get","props","a","response","id","Locations","getListProvince","getListDistricts","Option","Select","App","useState","province","setProvince","cities","setCities","provinces","data","value","districts","useEffect","getProvinces","className","src","logo","alt","style","width","placeholder","onChange","getCities","map","index","key","name","marginTop","city","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0NACaA,G,MADK,a,iBCELC,EAAsB,kBAAMC,IAAMC,OAAO,CACpDC,QAAS,oCACTC,QAAS,KACTC,QAAS,CACP,eAAe,uBCENC,EAAqB,SAACC,GACb,IAAnBC,EAAkB,uDAAT,KACV,OAAOR,IAAsBS,IAAIF,EAAK,CACpCC,OAAQA,K,4CCRZ,WAA+BE,GAA/B,eAAAC,EAAA,6DACQC,EAAW,GADnB,kBAGyBN,EAAmBP,GAH5C,cAGQa,EAHR,yBAIeA,GAJf,yH,kEAUA,WAAgCF,GAAhC,iBAAAC,EAAA,6DACQE,EAAKH,EAAMG,GACXD,EAAW,GAFnB,kBAIyBN,EAAmB,GAAD,OAAIP,EAAJ,YAA+Bc,EAA/B,eAJ3C,cAIQD,EAJR,yBAKeA,GALf,yH,sBAWA,IAKeE,EALG,CACdC,gB,4CACAC,iB,sDCpBIC,EAAWC,IAAXD,OAoDOE,MAlDf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,iDAOb,4BAAAb,EAAA,sEACwBG,EAAUC,gBAAgB,IADlD,OACMU,EADN,OAEEH,EAAYG,EAAUC,KAAKA,KAAKD,WAFlC,4CAPa,kEAYb,WAAyBE,GAAzB,eAAAhB,EAAA,sEACqBG,EAAUE,iBAAiB,CAAEH,GAAIc,IADtD,OACMJ,EADN,OAEEC,EAAUD,EAAOG,KAAKA,KAAKE,WAF7B,4CAZa,sBAqBb,OAlBAC,qBAAU,YAHG,mCAIXC,KACC,CAACP,IAiBF,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,kBAAC,IAAD,CACEC,MAAO,CAAEC,MAAO,KAChBC,YAAY,qBACZC,SAdR,SAA8BX,IAjBjB,oCAkBXY,CAAUZ,KAeHN,EAASmB,KAAI,SAACnB,EAAUoB,GAAX,OACZ,kBAACxB,EAAD,CAAQyB,IAAKrB,EAASR,IAAKQ,EAASsB,UAGxC,kBAAC,IAAD,CACER,MAAO,CAAEC,MAAO,IAAKQ,UAAW,IAChCP,YAAY,sBAEXd,EAAOiB,KAAI,SAACK,EAAMJ,GAAP,OACV,kBAACxB,EAAD,CAAQyB,IAAKG,EAAKhC,IAAKgC,EAAKF,aCtCpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.4ca7489f.chunk.js","sourcesContent":["const PROVINCES = \"provinces\";\r\nexport const PATH_LOCATION = {\r\n  PROVINCES: PROVINCES,\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const serviceWithoutToken = () => axios.create({\r\n  baseURL: \"https://34.87.158.65/v1/location/\",\r\n  timeout: 60 * 4 * 1000,\r\n  headers: {\r\n    \"Content-Type\": `application/json`,\r\n  }\r\n});","import {\r\n  serviceWithoutToken\r\n} from \"./httpClient\";\r\n\r\n/** Service With Token */\r\n\r\n\r\n/** Service Without Token */\r\nexport const apiGetWithoutToken = (url,\r\n   params = null) => {\r\n  return serviceWithoutToken().get(url, {\r\n    params: params\r\n  });\r\n};\r\n","import { PATH_LOCATION } from \"../../services/path/location\";\r\nimport { apiGetWithoutToken } from \"../../services/api\";\r\n\r\nasync function getListProvince(props) {\r\n    let response = \"\";\r\n    try {\r\n        response = await apiGetWithoutToken(PATH_LOCATION.PROVINCES);\r\n        return response;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nasync function getListDistricts(props) {\r\n    let id = props.id\r\n    let response = \"\";\r\n    try {\r\n        response = await apiGetWithoutToken(`${PATH_LOCATION.PROVINCES}/${id}/districts`);\r\n        return response;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nconst Locations = {\r\n    getListProvince,\r\n    getListDistricts\r\n}\r\n\r\nexport default Locations;","import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Locations from \"./repository/locations\";\nimport { Select } from \"antd\";\n\nconst { Option } = Select;\n\nfunction App() {\n  const [province, setProvince] = useState([]);\n  const [cities, setCities] = useState([]);\n  useEffect(() => {\n    getProvinces();\n  }, [cities]);\n\n  async function getProvinces() {\n    let provinces = await Locations.getListProvince({});\n    setProvince(provinces.data.data.provinces);\n  }\n\n  async function getCities(value) {\n    let cities = await Locations.getListDistricts({ id: value });\n    setCities(cities.data.data.districts);\n  }\n\n  function handleProvinceChange(value) {\n    getCities(value);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Select\n          style={{ width: 300 }}\n          placeholder=\"Select a Provinces\"\n          onChange={handleProvinceChange}\n        >\n          {province.map((province, index) => (\n            <Option key={province.id}>{province.name}</Option>\n          ))}\n        </Select>\n        <Select\n          style={{ width: 300, marginTop: 20 }}\n          placeholder=\"Select a Districts\"\n        >\n          {cities.map((city, index) => (\n            <Option key={city.id}>{city.name}</Option>\n          ))}\n        </Select>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}